#!/usr/bin/env python3

# edit-filenames
#
# Copyright (C) 2020 James D. Lin <jameslin@cal.berkeley.edu>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Renames or moves files using a text editor.

Allows paths to a large number of files to be edited using features of a text
editor, such as search-and-replace or multi-cursor editing.

See <https://github.com/jamesderlin/edit-filenames> for more information an
for examples.
"""

import collections
import errno
import getopt
import itertools
import os
import pathlib
import shutil
import string
import subprocess
import sys
import typing

import spawneditor


class AbortError(Exception):
    """
    A simple exception class to abort program execution.

    If `cancelled` is True, no error message should be printed.
    """
    def __init__(self, message: typing.Optional[str] = None,
                 cancelled: bool = False, exit_code: int = 1) -> None:
        super().__init__(message or ("Cancelled."
                                     if cancelled
                                     else "Unknown error"))
        assert exit_code != 0
        self.cancelled = cancelled
        self.exit_code = exit_code


class RestartEdit(Exception):
    """
    An exception that represents a request to restart the editor.  The editor's
    contents will be initialized to the specified paths.
    """
    def __init__(self, paths_to_edit: typing.List[str]) -> None:
        super().__init__()
        self.paths_to_edit = paths_to_edit


def flush_input():
    """Clears pending input from `sys.stdin`."""
    internal_helper = getattr(flush_input, "internal_helper", None)
    if internal_helper is not None:
        internal_helper()
        return

    import importlib  # pylint: disable=import-outside-toplevel

    # For POSIX systems.
    try:
        termios = importlib.import_module("termios")
    except ModuleNotFoundError:
        pass
    else:
        def _internal_helper():
            termios.tcflush(sys.stdin, termios.TCIOFLUSH)

        flush_input.internal_helper = _internal_helper
        _internal_helper()
        return

    # For Windows systems.
    try:
        msvcrt = importlib.import_module("msvcrt")
    except ModuleNotFoundError:
        pass
    else:
        def _internal_helper():
            while msvcrt.kbhit():
                msvcrt.getch()

        flush_input.internal_helper = _internal_helper
        _internal_helper()
        return


def prompt(message: str, choices: typing.Iterable[str], *,
           default: typing.Optional[str] = None) -> str:
    """
    Prompts the user to choose from a list of choices.  Accepts any user input
    that unambiguously matches the start of one of the choices.  Matches are
    case-insensitive.

    Returns the selected choice.

    Raises an `AbortError` if the user cancels the prompt by sending EOF.
    """
    assert choices
    assert not default or default in choices
    normalized_choices = [(choice.strip().lower(), choice)
                          for choice in choices]
    del choices

    while True:
        try:
            # Answering prompts with aleady-buffered input (particularly with
            # empty lines) is potentially dangerous, so disallow it.
            flush_input()
            raw_response = input(message)
            response = (raw_response.strip().lower(), raw_response)
            del raw_response
        except EOFError:
            print()
            raise AbortError(cancelled=True) from None

        if not response[0]:
            if default:
                return default
            continue

        if response[0] == "?":
            continue

        selected_choices: typing.List[typing.Tuple[str, str]] = []
        for choice in normalized_choices:
            if choice[0].startswith(response[0]):
                selected_choices.append(choice)

        if not selected_choices:
            print(f"Invalid choice: {response[1]}", file=sys.stderr)
        elif len(selected_choices) == 1:
            return selected_choices[0][1]
        else:
            print(f"Ambiguous choice: {response[1]}", file=sys.stderr)


def extract_file_paths(lines: typing.List[str]) -> typing.List[str]:
    """Parses and returns the list of file paths from the edited file."""
    # Ignore trailing blank lines.
    for last_line in reversed(range(len(lines))):
        if lines[last_line].strip():
            break
    else:
        last_line = 0

    # Ignore instructions.  To be robust in case the user removes or edits
    # lines from the instructions, assume that the last, non-trailing blank
    # line separates the instructions from the actual content.
    for first_line in reversed(range(last_line)):
        if not lines[first_line].strip():
            first_line += 1
            break
    else:
        first_line = 0

    return [lines[i].rstrip("\n") for i in range(first_line, last_line + 1)]


_instructions = """\
**********************************************************************
* INSTRUCTIONS:
*
* Edit file paths below to move or rename the corresponding files.
*
* Do NOT add or remove any lines.
*
**********************************************************************
"""
assert _instructions.endswith("\n")


def edit_paths(paths: typing.Iterable[str], *,
               editor: typing.Optional[str] = None,
               show_instructions=True) -> typing.List[str]:
    """
    Opens the list of paths in the editor and returns the edited paths.

    If no editor is specified, one will be determined automatically.

    Raises an `AbortError` if we fail to execute the editor.
    """
    instructions = [] if not show_instructions else [_instructions]
    try:
        edited_file = spawneditor.edit_temporary(
            itertools.chain(instructions, paths),
            temporary_prefix=f"{__name__}-",
            line_number=(len(instructions)
                         + sum((s.count("\n") for s in instructions))
                         + 1),
            editor=editor,
            stdin=sys.stdin,
        )
    except subprocess.CalledProcessError as e:
        raise AbortError(f"Failed to execute editor: {e.cmd}",
                         exit_code=e.returncode) from e
    except spawneditor.UnsupportedPlatformError as e:
        raise AbortError(str(e)) from e

    return extract_file_paths(list(edited_file))


def sanitized_path(s: str) -> str:
    """
    Returns a sanitized version of the specified file path.

    Carriage return and linefeed characters will be replaced with a single
    space, and all other control characters will be removed.
    """
    def replacement_char(c: str) -> str:
        if c in "\r\n":
            return " "
        elif ord(c) < ord(" "):
            # Remove control characters.
            return ""
        else:
            return c

    return "".join((replacement_char(c) for c in s))


def move_file(source_path: pathlib.Path, destination_path: pathlib.Path) \
        -> typing.List[typing.Callable[[], typing.Any]]:
    """
    Moves the specified file from `source_path` to `destination_path`.

    Raises an `OSError` on failure.
    """
    def undo_mkdir(path: pathlib.Path) -> typing.Callable[[], None]:
        return lambda: os.rmdir(path)

    undo_stack: typing.List[typing.Callable[[], typing.Any]] = []

    parts = destination_path.parent.parts
    ancestor_path = pathlib.Path()
    for part in parts:
        ancestor_path /= part
        if not ancestor_path.exists():
            os.mkdir(ancestor_path)
            undo_stack.append(undo_mkdir(ancestor_path))

    if os.path.lexists(destination_path):
        raise OSError(errno.EEXIST, f"\"{destination_path}\" already exists.",
                      destination_path)
    shutil.move(str(source_path), str(destination_path))
    operation = ("Renamed"
                 if source_path.parent == destination_path.parent
                 else "Moved")
    print(f"{operation}: \"{source_path}\" => \"{destination_path}\"")
    undo_stack.append(lambda: os.rename(destination_path, source_path))
    return undo_stack


class EditMoveContext:
    """Context for `edit_move` and its helper functions."""
    original_paths: typing.List[str]
    previous_paths: typing.List[str]
    new_paths: typing.List[str]
    source_destination_list: \
        typing.List[typing.Tuple[pathlib.Path, pathlib.Path]]
    interactive: bool

    def __init__(self, original_paths: typing.List[str], *,
                 interactive: bool) -> None:
        self.original_paths = original_paths
        self.previous_paths = original_paths
        self.new_paths = []
        self.source_destination_list = []
        self.interactive = interactive


def check_whitespace(ctx: EditMoveContext) -> None:
    """
    Helper function to `check_paths` that checks the list of edited paths for
    trailing whitespace, prompting the user to take action if necessary.

    Raises `RestartEdit` if the user chooses to re-edit the paths.  Raises an
    `AbortError` if the user chooses to quit.
    """
    whitespace_characters = tuple(string.whitespace)
    has_trailing_whitespace = any((path.endswith(whitespace_characters)
                                   for path in ctx.new_paths))

    if not has_trailing_whitespace:
        return

    print("Lines with trailing whitespace detected.", file=sys.stderr)
    if not ctx.interactive:
        print("Automatically stripping trailing whitespace.", file=sys.stderr)
        response = "strip"
    else:
        response = prompt("s: Strip trailing whitespace (default)\n"
                          "p: Preserve all whitespace\n"
                          "e: Edit\n"
                          "q: Quit\n"
                          "? [s] ",
                          ("strip", "preserve", "edit", "quit"),
                          default="strip")

    if response == "strip":
        ctx.new_paths = [path.rstrip() for path in ctx.new_paths]
    elif response == "edit":
        raise RestartEdit(ctx.new_paths)
    elif response == "quit":
        raise AbortError(cancelled=True)
    else:
        assert response == "preserve"


def check_collisions(ctx: EditMoveContext) -> None:
    """
    Helper function to `check_paths` that sanity-checks for destination file
    path collisions, prompting the user to take action if necessary.

    Raises `RestartEdit` if the user chooses to re-edit the paths.  Raises an
    `AbortError` if the user chooses to quit.
    """
    found_collision = False
    destination_paths: typing.Set[pathlib.Path] = set()
    for (_, destination_path) in ctx.source_destination_list:
        if destination_path not in destination_paths:
            destination_paths.add(destination_path)
        else:
            found_collision = True
            print(f"\"{destination_path}\" already used as a destination.",
                  file=sys.stderr)

    if found_collision:
        if not ctx.interactive:
            response = "quit"
        else:
            response = prompt("r: Restart (default)\n"
                              "q: Quit\n"
                              "? [r] ",
                              ("restart", "quit"),
                              default="restart")

        if response == "restart":
            raise RestartEdit(ctx.previous_paths)
        else:
            assert response == "quit"
            raise AbortError(cancelled=True)

    renamed_sources = {source_path
                       for (source_path, _) in ctx.source_destination_list}
    for (_, destination_path) in ctx.source_destination_list:
        # If A will be renamed to be B and B will be renamed to C, don't treat
        # the existence of B as a collision.
        if (destination_path not in renamed_sources
                and os.path.lexists(destination_path)):
            found_collision = True
            print(f"\"{destination_path}\" already exists.")

    if found_collision:
        if not ctx.interactive:
            response = "quit"
        else:
            response = prompt("e: Edit (default)\n"
                              "q: Quit\n"
                              "? [e] ",
                              ("edit", "quit"),
                              default="edit")

        if response == "edit":
            raise RestartEdit(ctx.new_paths)
        else:
            assert response == "quit"
            raise AbortError(cancelled=True)


def check_paths(ctx: EditMoveContext) -> None:
    """
    Runs various sanity-checks on the edited file paths, prompting the user to
    take action if necessary.

    Raises `RestartEdit` if the user chooses to re-edit the paths.  Raises an
    `AbortError` if the user chooses to quit.
    """
    if not ctx.new_paths:
        raise AbortError("Cancelling due to an empty file list.")

    if len(ctx.new_paths) != len(ctx.original_paths):
        print("Error: Lines may not be added or removed.", file=sys.stderr)
        if not ctx.interactive:
            response = "quit"
        else:
            response = prompt("r: Restart (default)\n"
                              "q: Quit\n"
                              "? [r] ",
                              ("restart", "quit"),
                              default="restart")

        if response == "quit":
            raise AbortError(cancelled=True)
        else:
            assert response == "restart"
            raise RestartEdit(ctx.previous_paths)

    check_whitespace(ctx)

    # Filter out unchanged paths.
    ctx.source_destination_list = [
        (pathlib.Path(original_path), pathlib.Path(new_path))
        for (original_path, new_path) in zip(ctx.original_paths, ctx.new_paths)
        if original_path != new_path
    ]

    if not ctx.source_destination_list:
        raise AbortError("Nothing to do.")

    check_collisions(ctx)


def preview_renames(ctx: EditMoveContext) -> None:
    """
    Prints a preview of the actions that will be performed and prompts the user
    for confirmation.

    Raises `RestartEdit` if the user chooses to re-edit the paths.  Raises an
    `AbortError` if the user chooses to quit.
    """
    if not ctx.interactive:
        return

    print("The following files will be moved or renamed:")
    for (source_path, new_path) in ctx.source_destination_list:
        print(f"  \"{source_path}\" => \"{new_path}\"")
    response = prompt("p: Proceed (default)\n"
                      "e: Edit\n"
                      "q: Quit\n"
                      "? [p] ",
                      ("proceed", "edit", "quit"),
                      default="proceed")
    if response == "quit":
        raise AbortError(cancelled=True)
    elif response == "edit":
        raise RestartEdit(ctx.new_paths)
    else:
        assert response == "proceed"


def temp_path_for(path: pathlib.Path) -> pathlib.Path:
    """
    Returns a path appropriate for a temporary file located in the same
    directory as the input path.
    """
    counter = getattr(temp_path_for, "counter", 0)

    parent = path.parent
    while True:
        temp_path = parent / f"{__name__}-{counter}.tmp"
        if not os.path.lexists(temp_path):
            setattr(temp_path_for, "counter", counter)
            return temp_path
        counter += 1


def apply_moves(ctx: EditMoveContext) -> None:
    """
    Applies the move operations, prompting the user to take action if there are
    any failures.
    """
    # Reorder the renames to try to minimize file system access.  If we have
    # chains of renames (e.g. A => B, B => C, C => D), we'll want to perform the
    # C => D rename first to unblock the rest.
    #
    # Use an `OrderedDict` to preserve the original order as much as possible.
    source_destination_dict \
        = collections.OrderedDict(ctx.source_destination_list)
    source_destination_deque: \
        typing.Deque[typing.Tuple[pathlib.Path, pathlib.Path]] \
        = collections.deque()
    while source_destination_dict:
        # To preserve the original order as much as possible, keep track of
        # current chain of renames instead of appending directly the deque.
        rename_chain: typing.List[typing.Tuple[pathlib.Path, pathlib.Path]] = []
        (source_path, destination_path) \
            = source_destination_dict.popitem(last=False)
        rename_chain.append((source_path, destination_path))
        while destination_path in source_destination_dict:
            (source_path, destination_path) \
                = (destination_path, source_destination_dict[destination_path])
            rename_chain.append((source_path, destination_path))
            del source_destination_dict[source_path]

        source_destination_deque += reversed(rename_chain)
    assert len(source_destination_deque) == len(ctx.source_destination_list)

    undo_stack: typing.List[typing.Callable[[], typing.Any]] = []
    failures: typing.List[typing.Tuple[pathlib.Path, pathlib.Path, str]] = []
    renamed_sources = {source_path
                       for (source_path, _) in ctx.source_destination_list}
    temp_paths: typing.Dict[pathlib.Path, pathlib.Path] = {}
    while source_destination_deque:
        (source_path, destination_path) = source_destination_deque.popleft()
        try:
            undo_stack += move_file(source_path, destination_path)
        except OSError as e:
            if (e.errno != errno.EEXIST
                    or destination_path not in renamed_sources):
                failures.append((source_path, destination_path,
                                 f"{e.strerror} (error code: {e.errno})"))
                continue

            # To support rotating files, if the destination filename collides
            # with a file that will also be renamed, defer this rename.
            temp_path = temp_path_for(source_path)
            source_destination_deque.appendleft((source_path, temp_path))
            source_destination_deque.append((temp_path, destination_path))
        except Exception as e:  # pylint: disable=broad-except
            failures.append((source_path, destination_path, str(e)))

    if not failures:
        return

    for (source_path, destination_path, reason) in failures:
        original_path = temp_paths.get(source_path)
        if original_path:
            print(f"Failed to move \"{source_path}\" "
                  f"(originally \"{original_path}\") to "
                  f"\"{destination_path}\": {reason}",
                  file=sys.stderr)
        else:
            print(f"Failed to move \"{source_path}\" to "
                  f"\"{destination_path}\": {reason}",
                  file=sys.stderr)

    if not undo_stack:
        return

    if not ctx.interactive:
        print("Undoing all changes.", file=sys.stderr)
        response = "undo"
    else:
        response = prompt("k: Keep successful changes (default)\n"
                          "u: Undo all changes\n"
                          "? [k] ",
                          ("undo", "keep"),
                          default="keep")

    if response == "keep":
        return

    assert response == "undo"
    undo_failed = False
    while undo_stack:
        callback = undo_stack.pop()
        try:
            callback()
        except OSError as e:
            print(str(e))
            undo_failed = True
    if undo_failed:
        raise AbortError("Failed to undo changes.")


def edit_move(original_paths: typing.List[str], *,
              editor: typing.Optional[str] = None,
              interactive=True,
              use_absolute_paths=False) -> None:
    """
    Opens the specified paths in an editor, sanity-checks the move operations,
    and applies the moves.

    If no editor is specified, one will be determined automatically. (See
    `run_editor`.)

    If `interactive` is `True`, prompts the user for confirmation before
    performing operations.

    If `use_absolute_paths` is `True`, the file paths will be opened in the
    editor using absolute paths.

    Raises an `AbortError` on failure or if the user chooses to quit.
    """
    assert original_paths

    # Normalize paths.
    if use_absolute_paths:
        # The only way to normalize paths with `pathlib.Path` is to use
        # `pathlib.Path.resolve`, which also resolves symlinks.  We don't want
        # to resolve symlinks (since we might want to rename the symlinks
        # themselves), so we fall back to use `os.path.abspath`, which
        # automatically normalizes (unlike `pathlib.Path.absolute`).
        original_paths = [os.path.abspath(path) for path in original_paths]
    else:
        original_paths = [os.path.normpath(path) for path in original_paths]

    original_paths = list(set(original_paths))
    original_paths.sort()

    # Verify that all paths exist.
    directories_to_move: typing.List[pathlib.Path] = []
    for path_str in original_paths:
        path = pathlib.Path(os.path.abspath(path_str))

        ancestor_path = path
        while True:
            next_parent = ancestor_path.parent
            if next_parent == ancestor_path:
                break
            ancestor_path = next_parent

            if ancestor_path in directories_to_move:
                raise AbortError(f"\"{path}\" and \"{ancestor_path}\" cannot "
                                 f"be moved together.")

        if path.is_dir():
            directories_to_move.append(path)
        elif not os.path.lexists(path):
            raise AbortError(f"\"{path}\" not found.")

    ctx = EditMoveContext(original_paths, interactive=interactive)

    sanitized_paths = [sanitized_path(path) for path in ctx.original_paths]
    if sanitized_paths != ctx.original_paths:
        print("Non-printable characters found in paths.",
              file=sys.stderr)
        if not ctx.interactive:
            print("Automatically replacing non-printable characters.",
                  file=sys.stderr)
            response = "replace"
        else:
            response = prompt("r: Replace non-printable characters (default)\n"
                              "q: Quit\n"
                              "? [r] ",
                              ("replace", "quit"),
                              default="replace")

        if response == "quit":
            raise AbortError(cancelled=True)
        else:
            assert response == "replace"

    paths_to_edit = sanitized_paths
    while True:
        try:
            assert len(paths_to_edit) == len(original_paths)
            ctx.previous_paths = paths_to_edit
            ctx.new_paths = edit_paths(paths_to_edit, editor=editor,
                                       show_instructions=interactive)
            ctx.new_paths = [os.path.normpath(path) for path in ctx.new_paths]

            check_paths(ctx)
            preview_renames(ctx)
            apply_moves(ctx)
            break

        except RestartEdit as e:
            paths_to_edit = e.paths_to_edit
            continue


_usage_text = """
Options:
    -e EDITOR, --editor=EDITOR
        The path to the editor to use, along with any desired command-line
        options.  If not specified, the editor will be automatically chosen
        from the `VISUAL` or `EDITOR` environment variables.

    --absolute
        Use absolute file paths.

    --non-interactive
        Disables all confirmation prompts and disables showing instructions in
        the editor.  Useful for automated editing.

        In non-interactive mode, any failure will automatically undo any changes
        and abort.
"""


def usage(*, full: bool = False, file: typing.TextIO = sys.stdout) -> None:
    """Prints usage information."""
    print(f"Usage: {__name__} [OPTIONS] FILE [FILE ...]\n"
          f"       {__name__} --help\n",
          file=file,
          end="")
    if full:
        print(f"\n"
              f"{__doc__.strip()}\n"
              f"\n"
              f"{_usage_text.strip()}\n",
              file=file,
              end="")


def main(argv: typing.List[str]) -> int:
    try:
        (opts, args) = getopt.getopt(argv[1:],
                                     "he:",
                                     ["help",
                                      "editor=",
                                      "absolute",
                                      "interactive",
                                      "non-interactive"])
    except getopt.GetoptError as e:
        print(str(e), file=sys.stderr)
        usage(file=sys.stderr)
        return 1

    editor: typing.Optional[str] = None
    interactive = True
    use_absolute_paths = False

    for (o, a) in opts:
        if o in ("-h", "--help"):
            usage(full=True)
            return 0
        elif o in ("-e", "--editor"):
            editor = a
        elif o == "--absolute":
            use_absolute_paths = True
        elif o == "--interactive":
            interactive = True
        elif o == "--non-interactive":
            interactive = False

    if not args:
        usage(file=sys.stderr)
        return 1

    old_stdin = sys.stdin
    new_stdin: typing.Optional[typing.TextIO] = None
    if interactive:
        try:
            # pylint: disable=import-error,unused-import,import-outside-toplevel
            # Imported for side-effect.
            import readline  # noqa: F401
        except ModuleNotFoundError:
            pass

        # Force sys.stdin to be an interactive terminal (tty) in interactive
        # mode.
        new_stdin = os.fdopen(1)
        sys.stdin = new_stdin

    try:
        edit_move(args,
                  editor=editor,
                  interactive=interactive,
                  use_absolute_paths=use_absolute_paths)
    finally:
        sys.stdin = old_stdin
        if new_stdin:
            new_stdin.close()

    return 0


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)  # pylint: disable=redefined-builtin

    try:
        sys.exit(main(sys.argv))
    except AbortError as e:
        if not e.cancelled:
            print(f"{__name__}: {e}", file=sys.stderr)
        sys.exit(e.exit_code)
    except KeyboardInterrupt:
        sys.exit(1)
